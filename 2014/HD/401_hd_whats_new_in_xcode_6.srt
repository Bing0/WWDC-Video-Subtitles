

1
00:00:12.856 --> 00:00:13.586 A:middle
&gt;&gt; Good morning.

2
00:00:14.046 --> 00:00:17.406 A:middle
Welcome to WWDC and this
is "What's New in Xcode."

3
00:00:20.176 --> 00:00:22.326 A:middle
You guys saw a lot of
new stuff yesterday.

4
00:00:23.906 --> 00:00:26.366 A:middle
Today, we thought we
would take a deep dive

5
00:00:26.426 --> 00:00:29.336 A:middle
into a few specific
areas of Xcode 6.

6
00:00:31.836 --> 00:00:34.456 A:middle
Before we do, though, let's
take a look at what's happened

7
00:00:34.456 --> 00:00:36.236 A:middle
since last time that
we were here together.

8
00:00:37.206 --> 00:00:44.236 A:middle
I hope you guys are all
using and enjoying Xcode 5.1.

9
00:00:44.446 --> 00:00:47.506 A:middle
Since last year, one of
the biggest new things

10
00:00:47.506 --> 00:00:51.076 A:middle
that we added was
support for iOS 64-bit.

11
00:00:52.446 --> 00:00:55.346 A:middle
And you guys have done an
amazing job of adopting 64-bit

12
00:00:55.346 --> 00:00:59.186 A:middle
in your apps to take full
advantage of our latest devices.

13
00:01:01.356 --> 00:01:05.036 A:middle
We've also made significant
improvements to auto layout

14
00:01:05.036 --> 00:01:08.826 A:middle
in Interface Builder
and added new APIs

15
00:01:09.116 --> 00:01:12.266 A:middle
to make your own classes work
with Debugger Quick Look.

16
00:01:14.716 --> 00:01:18.846 A:middle
This fall we'll be
releasing Xcode 6

17
00:01:20.156 --> 00:01:23.076 A:middle
with an even more beautiful
and functional interface

18
00:01:23.226 --> 00:01:25.036 A:middle
to go along with OS X Yosemite.

19
00:01:25.676 --> 00:01:32.736 A:middle
Let's take a quick look at some
of the new features in Xcode 6.

20
00:01:35.496 --> 00:01:37.906 A:middle
First of all, we have a brand
new programming language

21
00:01:37.906 --> 00:01:39.666 A:middle
for Cocoa development
called Swift.

22
00:01:40.486 --> 00:01:43.536 A:middle
And Swift is exciting
enough on its own,

23
00:01:44.326 --> 00:01:45.436 A:middle
but we didn't stop there.

24
00:01:46.876 --> 00:01:49.746 A:middle
Playgrounds provide a live
and responsive environment

25
00:01:49.786 --> 00:01:50.926 A:middle
for you to develop code.

26
00:01:52.496 --> 00:01:54.616 A:middle
Whether you're exploring
new technologies,

27
00:01:54.616 --> 00:01:57.346 A:middle
like Sprite Kit physics
courses, or just playing

28
00:01:57.346 --> 00:01:59.386 A:middle
around with Swift
itself, you're going

29
00:01:59.386 --> 00:02:01.146 A:middle
to love the experience
of playgrounds.

30
00:02:05.056 --> 00:02:08.126 A:middle
Playgrounds also offer a
great learning environment.

31
00:02:09.466 --> 00:02:12.496 A:middle
The Swift language guided
tour is actually a playground

32
00:02:12.986 --> 00:02:15.426 A:middle
where you can try things
out right as you're reading

33
00:02:15.426 --> 00:02:17.266 A:middle
and learning about Swift.

34
00:02:19.006 --> 00:02:22.486 A:middle
And of course Swift is
fully integrated into Xcode.

35
00:02:24.626 --> 00:02:27.296 A:middle
Everything from code completion
to connect from source

36
00:02:27.296 --> 00:02:30.306 A:middle
in Interface Builder works
beautifully with Swift.

37
00:02:32.056 --> 00:02:35.206 A:middle
When you're working
in Swift, Xcode knows.

38
00:02:35.766 --> 00:02:38.236 A:middle
If you ask to see the
interface for a framework class,

39
00:02:38.576 --> 00:02:40.926 A:middle
Xcode will show it
to you in Swift.

40
00:02:42.166 --> 00:02:47.386 A:middle
And when you ask for Quick
Help, you get help in Swift.

41
00:02:48.176 --> 00:02:51.226 A:middle
Now, Quick Help actually
has another new trick.

42
00:02:52.416 --> 00:02:55.176 A:middle
Oh, that's not that build.

43
00:02:57.176 --> 00:02:59.266 A:middle
So we have another new
trick that works well

44
00:02:59.266 --> 00:03:00.966 A:middle
with Swift's inferred types.

45
00:03:01.526 --> 00:03:04.226 A:middle
If you're ever curious about
what type is being inferred

46
00:03:04.326 --> 00:03:06.456 A:middle
by Swift, Quick Help
can tell you.

47
00:03:10.936 --> 00:03:13.336 A:middle
And you can freely mix Swift

48
00:03:13.336 --> 00:03:16.006 A:middle
into your existing
Objective-C applications.

49
00:03:17.296 --> 00:03:23.136 A:middle
We'll be showing you how easy
that is in a few minutes.

50
00:03:25.836 --> 00:03:30.756 A:middle
Now, let's talk about some
of Xcode's design tools

51
00:03:30.756 --> 00:03:31.716 A:middle
and the new features there.

52
00:03:32.496 --> 00:03:36.706 A:middle
You're probably all familiar
with using storyboards

53
00:03:36.706 --> 00:03:38.516 A:middle
to develop your iOS
applications.

54
00:03:39.106 --> 00:03:41.166 A:middle
And in Xcode 6, you
can use storyboards

55
00:03:41.166 --> 00:03:43.366 A:middle
to develop your OS X
applications as well.

56
00:03:46.176 --> 00:03:52.656 A:middle
In iOS, the new adaptive UI lets
you have a single storyboard

57
00:03:52.656 --> 00:03:54.256 A:middle
for your universal applications,

58
00:03:54.926 --> 00:03:58.066 A:middle
while still retaining
full control

59
00:03:58.066 --> 00:03:59.566 A:middle
over customizing your interface

60
00:03:59.566 --> 00:04:04.536 A:middle
for both the iPhone
and the iPad.

61
00:04:04.536 --> 00:04:06.896 A:middle
And if you use custom
fonts in your application,

62
00:04:08.226 --> 00:04:11.136 A:middle
you can now see them right on
the canvas in Interface Builder.

63
00:04:13.516 --> 00:04:17.716 A:middle
[ Applause ]

64
00:04:18.216 --> 00:04:23.876 A:middle
We have some brand new
editors in Xcode 6 too,

65
00:04:23.876 --> 00:04:25.516 A:middle
like the Sprite Kit Level Editor

66
00:04:25.936 --> 00:04:27.916 A:middle
that lets you visually
assemble scenes.

67
00:04:28.476 --> 00:04:35.316 A:middle
Xcode 6 has a brand new way
to localize your applications.

68
00:04:37.006 --> 00:04:40.636 A:middle
You can export all of your
localizable content into XLIFF,

69
00:04:40.636 --> 00:04:43.026 A:middle
which is the industry-standard
format that's understood

70
00:04:43.026 --> 00:04:44.776 A:middle
by a lot of translation
services.

71
00:04:45.226 --> 00:04:49.206 A:middle
And when you get those
translations back, just import

72
00:04:49.616 --> 00:04:50.926 A:middle
and Xcode will help you to merge

73
00:04:50.926 --> 00:04:56.676 A:middle
that new content right
into your project.

74
00:04:56.676 --> 00:05:00.316 A:middle
And with iOS 8's
support for frameworks,

75
00:05:00.926 --> 00:05:02.766 A:middle
you can now build IB components.

76
00:05:03.916 --> 00:05:06.616 A:middle
Just by adding a few
attributes to your classes,

77
00:05:07.686 --> 00:05:10.256 A:middle
you can get them to show
up right in IB's canvas

78
00:05:10.676 --> 00:05:12.316 A:middle
and configure them
in the inspector.

79
00:05:13.956 --> 00:05:16.186 A:middle
We'll be showing
you how easy it is

80
00:05:16.836 --> 00:05:20.486 A:middle
to make your views
into IB components.

81
00:05:22.286 --> 00:05:29.516 A:middle
Now, Xcode 6 makes
debugging better than ever.

82
00:05:29.666 --> 00:05:32.616 A:middle
Often, when you're
debugging using queues,

83
00:05:34.056 --> 00:05:35.456 A:middle
it's not quite enough just

84
00:05:35.456 --> 00:05:37.686 A:middle
to see the code that's
running on the queue.

85
00:05:39.046 --> 00:05:42.556 A:middle
So in Xcode 6, we
now show you how

86
00:05:42.556 --> 00:05:44.506 A:middle
that block got onto
the queue also.

87
00:05:47.756 --> 00:05:50.506 A:middle
When you're developing
the new app extensions,

88
00:05:50.866 --> 00:05:53.216 A:middle
debugging support is
easy and automatic.

89
00:05:54.336 --> 00:05:56.646 A:middle
For example, if you're
developing a Today View

90
00:05:56.646 --> 00:05:58.886 A:middle
extension, just hit
Run in Xcode,

91
00:05:59.376 --> 00:06:01.236 A:middle
bring up Notification
Center on the device

92
00:06:01.796 --> 00:06:03.446 A:middle
and Xcode will automatically
attach

93
00:06:03.446 --> 00:06:04.856 A:middle
to your extension for debugging.

94
00:06:08.056 --> 00:06:11.626 A:middle
Xcode 6 has some
brand new debug gauges

95
00:06:11.626 --> 00:06:14.146 A:middle
to help you identify
problems with disc

96
00:06:14.146 --> 00:06:20.546 A:middle
and file I/O, disc
and network I/O.

97
00:06:20.786 --> 00:06:23.526 A:middle
And View debugging
gives you deep insight

98
00:06:23.526 --> 00:06:24.816 A:middle
into visual problems.

99
00:06:26.336 --> 00:06:30.186 A:middle
We'll be showing you how easy it
is to identify and fix problems

100
00:06:30.186 --> 00:06:31.206 A:middle
with your view hierarchy

101
00:06:31.206 --> 00:06:32.956 A:middle
and constraints using
View debugging.

102
00:06:36.396 --> 00:06:42.076 A:middle
Xcode 6 has some all-new
performance features as well

103
00:06:43.556 --> 00:06:47.176 A:middle
that will help you to make
your apps faster and leaner.

104
00:06:47.896 --> 00:06:52.616 A:middle
Our premier performance
tool, Instruments,

105
00:06:52.676 --> 00:06:56.076 A:middle
has a brand new interface
with new workflows

106
00:06:56.586 --> 00:06:59.586 A:middle
that make it easier than ever to
analyze your app's performance.

107
00:07:00.266 --> 00:07:06.496 A:middle
Last year we introduced
Xcode Server,

108
00:07:06.496 --> 00:07:09.496 A:middle
and one of the biggest requests
that we got was for the ability

109
00:07:09.496 --> 00:07:11.056 A:middle
to customize what happens

110
00:07:11.146 --> 00:07:12.776 A:middle
when you're running
continuous integrations.

111
00:07:13.736 --> 00:07:16.506 A:middle
So in Xcode 6, we've
added support for triggers

112
00:07:16.506 --> 00:07:22.786 A:middle
that allow you to add custom
behavior to your bots.

113
00:07:22.976 --> 00:07:27.626 A:middle
And we've added support in
the XE Test Framework in Xcode

114
00:07:27.626 --> 00:07:31.386 A:middle
and in Xcode Server
for performance tests.

115
00:07:32.186 --> 00:07:34.416 A:middle
It's easy to make
a performance test.

116
00:07:35.096 --> 00:07:37.886 A:middle
You just wrap your
code in a measureBlock.

117
00:07:39.556 --> 00:07:44.726 A:middle
Performance tests let Xcode
measure the speed of your code

118
00:07:45.236 --> 00:07:47.756 A:middle
and tell you whenever it
has improved or regressed.

119
00:07:48.396 --> 00:07:52.756 A:middle
And in order to help you to
make your apps even faster,

120
00:07:53.696 --> 00:07:58.316 A:middle
you can now profile your
performance tests directly

121
00:07:58.316 --> 00:08:02.106 A:middle
in Instruments with just a
choice from this context menu.

122
00:08:05.256 --> 00:08:05.396 A:middle
&gt;&gt; Yes!

123
00:08:07.016 --> 00:08:09.016 A:middle
[ Laughter ]

124
00:08:09.016 --> 00:08:09.083 A:middle
[ Applause ]

125
00:08:09.606 --> 00:08:10.776 A:middle
&gt;&gt; It's the little
things, right?

126
00:08:14.056 --> 00:08:16.616 A:middle
Xcode also includes
all-new reports

127
00:08:16.616 --> 00:08:19.366 A:middle
that show you exactly how your
performance tests are doing.

128
00:08:21.026 --> 00:08:23.466 A:middle
And we'll be showing
you how easy it is

129
00:08:23.596 --> 00:08:26.526 A:middle
to start writing performance
tests for your projects

130
00:08:26.766 --> 00:08:28.776 A:middle
and using them to
make your apps better.

131
00:08:29.466 --> 00:08:33.765 A:middle
So that's just a
quick tour of some

132
00:08:33.765 --> 00:08:35.576 A:middle
of the feature areas in Xcode 6.

133
00:08:35.576 --> 00:08:37.765 A:middle
And now we'd like
to dive in deeper

134
00:08:38.096 --> 00:08:41.216 A:middle
and give you a detailed look
at a few of these areas.

135
00:08:42.596 --> 00:08:45.676 A:middle
To get us started with that,
let me introduce Daniel Dunbar.

136
00:08:47.311 --> 00:08:49.311 A:middle
[ Applause ]

137
00:08:49.606 --> 00:08:50.216 A:middle
&gt;&gt; Thanks, Mike.

138
00:08:50.926 --> 00:08:53.186 A:middle
This talk is called
"What's New in Xcode,"

139
00:08:53.456 --> 00:08:56.516 A:middle
and obviously the big new
thing this year is Swift.

140
00:08:57.276 --> 00:08:59.026 A:middle
I'm sure you're all
really excited

141
00:08:59.026 --> 00:09:01.256 A:middle
about this new language
we unveiled yesterday.

142
00:09:01.756 --> 00:09:03.726 A:middle
And I imagine many of
you are wondering, "Well,

143
00:09:03.726 --> 00:09:06.846 A:middle
how quickly can I start using
this in my own applications?"

144
00:09:08.016 --> 00:09:10.716 A:middle
So we'd like to kick off
our demos this morning

145
00:09:10.946 --> 00:09:13.546 A:middle
by showing you just how easy
it is to integrate Swift

146
00:09:13.696 --> 00:09:15.256 A:middle
into an existing application.

147
00:09:16.576 --> 00:09:19.116 A:middle
We've created this new
photo scavenger game.

148
00:09:19.426 --> 00:09:20.336 A:middle
Let me show it to you now.

149
00:09:21.226 --> 00:09:25.116 A:middle
Our game is called Shutterbugs,
and when I open it up,

150
00:09:26.146 --> 00:09:28.006 A:middle
you'll see our game starts

151
00:09:28.276 --> 00:09:29.986 A:middle
with this great looking
sign-on screen,

152
00:09:29.986 --> 00:09:32.116 A:middle
and it takes the user
right into the game.

153
00:09:32.876 --> 00:09:34.166 A:middle
That's been working great,

154
00:09:34.476 --> 00:09:36.746 A:middle
but our app has really
been taking off recently,

155
00:09:36.746 --> 00:09:38.736 A:middle
and users tell us
they want to be able

156
00:09:38.736 --> 00:09:40.426 A:middle
to play multiple
games at one time.

157
00:09:41.376 --> 00:09:45.236 A:middle
So for Version 2, we'd like to
introduce a new games landing

158
00:09:45.236 --> 00:09:48.516 A:middle
screen that shows users their
in progress and completed games.

159
00:09:49.036 --> 00:09:51.326 A:middle
And of course we'd
like to do it in Swift.

160
00:09:52.416 --> 00:09:54.936 A:middle
Now, my designer has already
updated the storyboard

161
00:09:55.466 --> 00:09:58.176 A:middle
to include this table view
controller shown here.

162
00:09:59.146 --> 00:10:02.056 A:middle
All we need to do to finish off
this new feature is implement

163
00:10:02.056 --> 00:10:03.326 A:middle
the code for it.

164
00:10:04.416 --> 00:10:05.726 A:middle
So I know I'm going

165
00:10:05.726 --> 00:10:08.526 A:middle
to eventually want a custom
cell class for my table,

166
00:10:08.766 --> 00:10:10.386 A:middle
so I'll start with that.

167
00:10:10.976 --> 00:10:14.576 A:middle
Going to go to Views and select
New File from the popup menu.

168
00:10:15.446 --> 00:10:18.096 A:middle
Of course, I want an
iOS Cocoa Touch class.

169
00:10:18.756 --> 00:10:21.896 A:middle
And the first thing you'll
notice on this screen is

170
00:10:21.896 --> 00:10:23.776 A:middle
that there's a new language
chooser at the bottom

171
00:10:24.046 --> 00:10:26.426 A:middle
that lets you decide
whether you want a Swift

172
00:10:26.556 --> 00:10:27.646 A:middle
or an Objective-C class.

173
00:10:28.386 --> 00:10:32.026 A:middle
Of course I want Swift, and
in this case I want a subclass

174
00:10:32.086 --> 00:10:33.366 A:middle
of a UI table view cell.

175
00:10:34.046 --> 00:10:36.016 A:middle
I'll call it GamesTableView
Cell.

176
00:10:36.516 --> 00:10:38.976 A:middle
Drop that in my project...

177
00:10:39.066 --> 00:10:41.126 A:middle
and Xcode takes me
to the source.

178
00:10:41.726 --> 00:10:44.666 A:middle
These subclass templates are
a great way to get started

179
00:10:44.666 --> 00:10:45.626 A:middle
with the new language.

180
00:10:47.256 --> 00:10:51.746 A:middle
So for us, the main thing we'll
need is a couple of properties

181
00:10:51.746 --> 00:10:54.286 A:middle
that we can use to
connect our UI to.

182
00:10:54.796 --> 00:10:56.166 A:middle
So let me add that
to start with.

183
00:10:56.556 --> 00:11:00.136 A:middle
As you can see, property
declarations

184
00:11:00.136 --> 00:11:02.496 A:middle
in Swift are very
clean and simple.

185
00:11:02.766 --> 00:11:06.126 A:middle
And we just needed to add
this IBOutlet attribute

186
00:11:06.326 --> 00:11:08.566 A:middle
so that we could connect to
it from Interface Builder.

187
00:11:09.656 --> 00:11:12.656 A:middle
Now that that's in place, let
me go back to my storyboard.

188
00:11:17.136 --> 00:11:20.206 A:middle
So I'll select my
prototype cell,

189
00:11:20.586 --> 00:11:22.476 A:middle
and I need to associate
the class with it.

190
00:11:23.546 --> 00:11:24.606 A:middle
If I pull down this menu,

191
00:11:24.976 --> 00:11:27.786 A:middle
you see that Interface Builder
has already recognized our new

192
00:11:27.786 --> 00:11:30.086 A:middle
class using our Swift
indexing support.

193
00:11:30.696 --> 00:11:32.326 A:middle
So I'll select GamesTableView
Cell.

194
00:11:33.036 --> 00:11:36.176 A:middle
Now, you may notice there's
a new module field here.

195
00:11:37.026 --> 00:11:40.206 A:middle
Another great way that Swift
improves the coding experience

196
00:11:40.236 --> 00:11:42.906 A:middle
is by associating
classes with the modules

197
00:11:42.906 --> 00:11:43.826 A:middle
that they are declared in.

198
00:11:44.526 --> 00:11:46.046 A:middle
That allows you to use short,

199
00:11:46.156 --> 00:11:48.656 A:middle
comfortable class names
while still ensuring

200
00:11:48.656 --> 00:11:52.206 A:middle
that your classes won't collide
across targets and projects.

201
00:11:52.616 --> 00:11:57.326 A:middle
With that in place we can
set up our connections.

202
00:11:57.816 --> 00:12:02.046 A:middle
I'll close the Utilities
panel and open our source code

203
00:12:02.046 --> 00:12:03.126 A:middle
in the Assistant Editor.

204
00:12:03.676 --> 00:12:08.366 A:middle
And now I can wire up
my connections just

205
00:12:08.366 --> 00:12:09.036 A:middle
like you would expect.

206
00:12:09.636 --> 00:12:12.456 A:middle
I'll set the name,
the state label,

207
00:12:12.546 --> 00:12:14.266 A:middle
and we have a custom
progress view here.

208
00:12:15.506 --> 00:12:17.006 A:middle
OK, that should be enough

209
00:12:17.046 --> 00:12:18.986 A:middle
to let us get started
with our custom cell.

210
00:12:19.286 --> 00:12:23.866 A:middle
So now let's fill in the
details of the controller.

211
00:12:23.866 --> 00:12:26.286 A:middle
I've already added the
basic subclass template

212
00:12:26.606 --> 00:12:29.606 A:middle
with a couple tweaks, but we
need to fill in the details.

213
00:12:30.626 --> 00:12:34.496 A:middle
So the first thing that every
controller class needs is access

214
00:12:34.546 --> 00:12:36.516 A:middle
to the model data that
it's going to present.

215
00:12:37.676 --> 00:12:40.776 A:middle
For our application, most
of our model data is stored

216
00:12:40.776 --> 00:12:41.986 A:middle
in a user session class.

217
00:12:42.536 --> 00:12:44.986 A:middle
So let me add a property
to hold that now.

218
00:12:48.936 --> 00:12:52.416 A:middle
So I'll call it userSession
and declare its type.

219
00:12:53.646 --> 00:12:56.496 A:middle
Naturally, we have live
issue support in Swift,

220
00:12:56.816 --> 00:13:00.436 A:middle
and if I pop this open I can
see it's telling me there's an

221
00:13:00.436 --> 00:13:02.436 A:middle
undeclared type here:
userSession.

222
00:13:02.436 --> 00:13:04.976 A:middle
I haven't imported
that class yet.

223
00:13:05.966 --> 00:13:08.836 A:middle
Now, in Swift, all
of the classes

224
00:13:08.966 --> 00:13:13.256 A:middle
in one target are automatically
visible to each of the source --

225
00:13:13.486 --> 00:13:15.276 A:middle
the Swift implementation files.

226
00:13:15.746 --> 00:13:17.036 A:middle
You no longer need to worry

227
00:13:17.036 --> 00:13:19.516 A:middle
about manually importing
the headers for each

228
00:13:19.516 --> 00:13:20.876 A:middle
of the classes that you use.

229
00:13:21.516 --> 00:13:25.846 A:middle
[ Applause ]

230
00:13:26.346 --> 00:13:30.176 A:middle
Yep. However, you do still
need to import the modules

231
00:13:30.376 --> 00:13:32.156 A:middle
for the frameworks
that you depend upon.

232
00:13:33.156 --> 00:13:36.206 A:middle
To go along with iOS 8's
new framework support,

233
00:13:36.616 --> 00:13:39.836 A:middle
Xcode now has support
for you to define modules

234
00:13:39.896 --> 00:13:41.326 A:middle
out of your own frameworks.

235
00:13:42.256 --> 00:13:45.736 A:middle
And those modules can be used
in both Swift and Objective-C.

236
00:13:45.736 --> 00:13:49.236 A:middle
But we've already started
taking advantage of that

237
00:13:49.236 --> 00:13:52.246 A:middle
in our application by
moving all of our model code

238
00:13:52.596 --> 00:13:58.506 A:middle
into this new CoreShutterbugs
framework that you can see.

239
00:13:58.736 --> 00:14:02.576 A:middle
That means, to use this
-- fix this problem,

240
00:14:02.576 --> 00:14:07.206 A:middle
all I need to do is type
Import CoreShutterbugs just

241
00:14:07.206 --> 00:14:09.626 A:middle
like I would for any other
framework on the system.

242
00:14:09.876 --> 00:14:11.716 A:middle
And of course the
error goes away.

243
00:14:13.556 --> 00:14:17.116 A:middle
Now, our table view is going
to have two different sections.

244
00:14:17.366 --> 00:14:19.786 A:middle
We'll have one for the
in-progress games and then one

245
00:14:19.786 --> 00:14:21.006 A:middle
for the completed games.

246
00:14:21.666 --> 00:14:23.896 A:middle
So I want to start by
creating a utility method

247
00:14:23.896 --> 00:14:26.276 A:middle
that lets me easily get
the appropriate list

248
00:14:26.276 --> 00:14:27.106 A:middle
for each section.

249
00:14:27.636 --> 00:14:32.636 A:middle
I'm going to call it
gameListForSection.

250
00:14:32.966 --> 00:14:36.006 A:middle
And what I want to
return here is the result

251
00:14:36.006 --> 00:14:41.026 A:middle
of the user sessions
"getFilteredGameList" method.

252
00:14:41.506 --> 00:14:44.116 A:middle
You can see that even
though this is a method

253
00:14:44.116 --> 00:14:46.566 A:middle
that we declared in our
Objective-C source code

254
00:14:46.566 --> 00:14:49.206 A:middle
in another framework, I
still get code completion

255
00:14:49.206 --> 00:14:51.426 A:middle
and even the documentation
for that method

256
00:14:51.626 --> 00:14:52.666 A:middle
in my Swift source code.

257
00:14:53.816 --> 00:14:55.186 A:middle
So I'll complete that out.

258
00:14:55.506 --> 00:14:58.196 A:middle
And what I want to get
is the in-progress list

259
00:14:58.436 --> 00:14:59.836 A:middle
when the section number is 0.

260
00:15:00.346 --> 00:15:05.126 A:middle
I'm also going to add a
cast here to a game array.

261
00:15:05.686 --> 00:15:09.046 A:middle
What I'm doing here
is taking advantage

262
00:15:09.046 --> 00:15:12.436 A:middle
of Swift's typed collection
support to tell the compiler

263
00:15:12.616 --> 00:15:17.196 A:middle
that each object in this array
is an instance of my game class.

264
00:15:17.956 --> 00:15:20.626 A:middle
That way, whenever I use
this array later in the code,

265
00:15:20.876 --> 00:15:23.686 A:middle
the Swift compiler will know
the exact type of each object.

266
00:15:25.076 --> 00:15:26.846 A:middle
There's one more
utility I'd like.

267
00:15:26.986 --> 00:15:30.366 A:middle
In a table view you frequently
want to get the data associated

268
00:15:30.366 --> 00:15:33.126 A:middle
with a particular cell, and
that cell is represented

269
00:15:33.126 --> 00:15:33.856 A:middle
by an index path.

270
00:15:34.586 --> 00:15:37.906 A:middle
So I'll create a method that
lets me easily get the game

271
00:15:38.096 --> 00:15:39.386 A:middle
for a particular index path.

272
00:15:40.206 --> 00:15:42.336 A:middle
Going to call that
one gameForIndexPath,

273
00:15:42.876 --> 00:15:44.576 A:middle
and it returns an optional game.

274
00:15:45.026 --> 00:15:48.086 A:middle
With those methods in
place, should be easy

275
00:15:48.086 --> 00:15:49.816 A:middle
to write our table
view data source.

276
00:15:50.956 --> 00:15:54.496 A:middle
Let me drop that in.

277
00:15:54.706 --> 00:15:57.866 A:middle
What I'm doing here: setting the
number of sections to be 2...

278
00:15:58.926 --> 00:16:01.626 A:middle
I'm going to return an
appropriate number of rows

279
00:16:01.706 --> 00:16:04.666 A:middle
for each section using that
first utility method we added,

280
00:16:05.636 --> 00:16:09.656 A:middle
and I'll use gameForIndexPath to
easily get the particular game

281
00:16:09.886 --> 00:16:14.076 A:middle
and then propagate its data into
our custom cell whenever we need

282
00:16:14.076 --> 00:16:17.136 A:middle
to dequeue a new cell.

283
00:16:17.346 --> 00:16:20.066 A:middle
I've also added a
prepareForSegue method to set

284
00:16:20.066 --> 00:16:21.756 A:middle
up our destination
view controller

285
00:16:22.026 --> 00:16:24.366 A:middle
when the transition happens.

286
00:16:24.446 --> 00:16:27.536 A:middle
OK, we're almost done, but I'd

287
00:16:27.536 --> 00:16:29.986 A:middle
like to do one more thing before
we call our controller a wrap.

288
00:16:31.346 --> 00:16:34.426 A:middle
You can see that I'm already
modifying the separatorInset

289
00:16:34.426 --> 00:16:38.156 A:middle
on this table to give our table
a little bit of a custom look.

290
00:16:38.956 --> 00:16:40.686 A:middle
That's all right,
but I just heard

291
00:16:40.686 --> 00:16:44.016 A:middle
about iOS 8's new
Separator Effect property,

292
00:16:44.226 --> 00:16:45.566 A:middle
so I'd like to try it out here.

293
00:16:45.566 --> 00:16:51.106 A:middle
I know that it's called
"tableview.separatorEffect,"

294
00:16:51.846 --> 00:16:54.936 A:middle
but I can't remember the
exact object that I'm supposed

295
00:16:54.936 --> 00:16:56.136 A:middle
to assign to that property.

296
00:16:57.096 --> 00:17:01.326 A:middle
In Xcode 6, if we jump to
Definition, it'll take us right

297
00:17:01.326 --> 00:17:04.156 A:middle
to UITableView, but
it's rendered in Swift.

298
00:17:05.086 --> 00:17:07.656 A:middle
Even though this is actually
an Objective-C header

299
00:17:07.705 --> 00:17:11.326 A:middle
in the system framework, Xcode
has dynamically translated it

300
00:17:11.506 --> 00:17:14.215 A:middle
to the Swift interface just
like the compiler would see.

301
00:17:15.036 --> 00:17:16.726 A:middle
And even though this is
happening on the fly,

302
00:17:16.726 --> 00:17:20.486 A:middle
we take great care to preserve
all of the API comments

303
00:17:20.675 --> 00:17:23.086 A:middle
that you need to use these
libraries effectively.

304
00:17:24.266 --> 00:17:25.976 A:middle
Now that I'm here, I can see

305
00:17:25.976 --> 00:17:28.996 A:middle
that separatorEffect
is a UIVisualEffect.

306
00:17:29.566 --> 00:17:31.846 A:middle
And if I navigate
onwards to that?

307
00:17:33.166 --> 00:17:34.546 A:middle
Ah, now I remember.

308
00:17:35.096 --> 00:17:37.896 A:middle
What I want is a
UIVibrancyEffect, and I'm going

309
00:17:37.896 --> 00:17:39.906 A:middle
to use a Dark blur
style to go with that.

310
00:17:41.256 --> 00:17:46.836 A:middle
So let me add that to my code.

311
00:17:47.016 --> 00:17:49.306 A:middle
Now, when I go to
specify the style here,

312
00:17:49.576 --> 00:17:52.596 A:middle
I'm going to take advantage of
Swift's advanced type inference,

313
00:17:52.916 --> 00:17:55.916 A:middle
and that lets me
just type ".dark".

314
00:17:56.796 --> 00:17:57.916 A:middle
The compiler is going

315
00:17:57.916 --> 00:18:02.036 A:middle
to automatically infer the right
enumeration type to use here

316
00:18:02.296 --> 00:18:04.056 A:middle
because it's obvious
from the context.

317
00:18:04.416 --> 00:18:07.256 A:middle
That saves me having to type
the full enumeration name

318
00:18:07.396 --> 00:18:08.766 A:middle
and can really save
a lot of typing.

319
00:18:10.076 --> 00:18:12.606 A:middle
OK, that should do it
for our controller,

320
00:18:12.986 --> 00:18:14.926 A:middle
but there's one last
thing we need to set up.

321
00:18:15.796 --> 00:18:17.806 A:middle
Remember that UserSession
property

322
00:18:17.936 --> 00:18:19.476 A:middle
that I started off by creating?

323
00:18:19.966 --> 00:18:21.546 A:middle
We've never initialized
it anywhere.

324
00:18:22.486 --> 00:18:24.776 A:middle
So to fix that, let's
take a very quick look

325
00:18:24.776 --> 00:18:26.716 A:middle
at the other side of
Swift development:

326
00:18:26.996 --> 00:18:29.636 A:middle
using your Swift classes
inside Objective-C.

327
00:18:30.956 --> 00:18:34.006 A:middle
The place that we want to
initialize this object is

328
00:18:34.006 --> 00:18:36.846 A:middle
in the sign-in controller's
prepareForSegue method.

329
00:18:37.736 --> 00:18:39.396 A:middle
And if I go to Sign-in
Controller,

330
00:18:39.486 --> 00:18:41.756 A:middle
you'll notice this is
an Objective-C file.

331
00:18:42.756 --> 00:18:46.226 A:middle
And of course in Objective-C
before you use your classes,

332
00:18:46.376 --> 00:18:47.456 A:middle
you need to import them.

333
00:18:48.166 --> 00:18:51.516 A:middle
But our class is defined in
Swift, so how can we do that?

334
00:18:52.146 --> 00:18:54.166 A:middle
Well, when you're using
Swift in a target,

335
00:18:54.616 --> 00:18:57.856 A:middle
Xcode will automatically
generate a new header for you

336
00:18:57.856 --> 00:19:01.046 A:middle
that contains the declarations
of each of your Swift classes.

337
00:19:01.836 --> 00:19:02.626 A:middle
All that you need to do

338
00:19:02.626 --> 00:19:05.296 A:middle
to use those classes
is import that header.

339
00:19:05.806 --> 00:19:10.916 A:middle
For this target it'll be
called Shutterbugs-Swift,

340
00:19:10.916 --> 00:19:12.206 A:middle
and I've added the Import Now.

341
00:19:13.046 --> 00:19:14.786 A:middle
You'll also notice
I'm taking advantage

342
00:19:15.016 --> 00:19:18.406 A:middle
of the at-import
syntax in Objective-C

343
00:19:18.636 --> 00:19:20.986 A:middle
to import my own
CoreShutterbugs framework.

344
00:19:22.406 --> 00:19:24.546 A:middle
So with those in place
I can fill in the rest

345
00:19:24.546 --> 00:19:25.436 A:middle
and prepare for segue.

346
00:19:25.436 --> 00:19:29.296 A:middle
I get the Games View Controller

347
00:19:29.616 --> 00:19:31.756 A:middle
and I'll set its
userSession property.

348
00:19:32.816 --> 00:19:36.776 A:middle
What you'll notice is that even
though GamesTableViewController

349
00:19:37.086 --> 00:19:37.566 A:middle
is a...

350
00:19:37.566 --> 00:19:43.766 A:middle
Swift class that we just
defined, we can use it

351
00:19:43.766 --> 00:19:45.946 A:middle
in Objective-C just
like any other class

352
00:19:46.166 --> 00:19:47.926 A:middle
and we can assign this property.

353
00:19:48.496 --> 00:19:50.826 A:middle
And if I came back
to this code later

354
00:19:50.826 --> 00:19:54.566 A:middle
and I'd forgotten what the type
was, I can even use Quick Help

355
00:19:55.056 --> 00:19:57.646 A:middle
to get the view as
Objective-C would see it,

356
00:19:57.646 --> 00:20:00.246 A:middle
and it even includes the
description of my property,

357
00:20:01.226 --> 00:20:04.126 A:middle
even though I only ever
wrote that one place

358
00:20:04.126 --> 00:20:05.296 A:middle
in my Swift source file.

359
00:20:06.556 --> 00:20:10.346 A:middle
So with those in place,
let's see how it looks.

360
00:20:11.166 --> 00:20:14.306 A:middle
I'm going to build and run,
and Xcode will launch our app

361
00:20:14.606 --> 00:20:16.226 A:middle
in the iPhone 5s simulator.

362
00:20:19.376 --> 00:20:21.376 A:middle
There's our great
looking sign-on screen.

363
00:20:21.986 --> 00:20:23.646 A:middle
And if I click through
to play Shutterbugs...

364
00:20:24.086 --> 00:20:25.256 A:middle
There you have it.

365
00:20:25.256 --> 00:20:30.086 A:middle
A new landing screen
completed entirely in Swift,

366
00:20:30.516 --> 00:20:32.766 A:middle
and with this great-looking
vibrancy effect to boot.

367
00:20:34.516 --> 00:20:39.396 A:middle
[ Applause ]

368
00:20:39.896 --> 00:20:42.916 A:middle
We've integrated Swift
support throughout Xcode 6

369
00:20:42.916 --> 00:20:46.356 A:middle
so that you can use the same
great development features

370
00:20:46.356 --> 00:20:47.516 A:middle
that you're already familiar

371
00:20:47.516 --> 00:20:50.436 A:middle
with to immediately start
working with our new language.

372
00:20:51.426 --> 00:20:54.946 A:middle
And with that, I'd like to turn
things over to Jon Hess to talk

373
00:20:54.946 --> 00:20:56.746 A:middle
to you about our brand new tools

374
00:20:56.926 --> 00:20:58.466 A:middle
for visual interface
development.

375
00:20:58.916 --> 00:20:59.276 A:middle
Thanks.

376
00:21:00.516 --> 00:21:05.076 A:middle
[ Applause ]

377
00:21:05.576 --> 00:21:06.186 A:middle
&gt;&gt; Thanks, Daniel.

378
00:21:06.316 --> 00:21:08.676 A:middle
I'd like to show all of you
how you can take advantage

379
00:21:08.676 --> 00:21:10.256 A:middle
of the new features of Xcode 6

380
00:21:10.256 --> 00:21:12.816 A:middle
to design the visual
aspects of your application.

381
00:21:13.186 --> 00:21:14.456 A:middle
Let's head over to
the demo machine.

382
00:21:14.456 --> 00:21:17.006 A:middle
I have a spec from my designer

383
00:21:17.006 --> 00:21:18.746 A:middle
to implement a circular
image view.

384
00:21:19.226 --> 00:21:21.006 A:middle
It's going to take a
square images input,

385
00:21:21.096 --> 00:21:23.986 A:middle
crop it to a circle, and
optionally desaturate the color.

386
00:21:25.296 --> 00:21:27.776 A:middle
Now, I'm finding Xcode's
new playgrounds feature

387
00:21:27.776 --> 00:21:30.096 A:middle
to be indispensable when
working on features like this.

388
00:21:30.896 --> 00:21:34.366 A:middle
I love being able to see
the results of my code side

389
00:21:34.366 --> 00:21:35.926 A:middle
by side as I write my code.

390
00:21:36.016 --> 00:21:38.626 A:middle
I have a playground
set up just for this.

391
00:21:39.776 --> 00:21:43.186 A:middle
It starts with a sample image,
and you'll have a basic function

392
00:21:43.186 --> 00:21:45.756 A:middle
to manipulate a graphics
context and return a new image.

393
00:21:45.886 --> 00:21:49.016 A:middle
I'm going to paste
in a bit of new code.

394
00:21:49.436 --> 00:21:54.236 A:middle
It will take an input image,
optionally desaturate it,

395
00:21:55.126 --> 00:21:57.426 A:middle
and two sample calls
to render my image.

396
00:21:58.576 --> 00:22:01.396 A:middle
Here in the Timeline I can see
all of the results of my code.

397
00:22:01.396 --> 00:22:03.506 A:middle
And by pressing this button,

398
00:22:03.666 --> 00:22:07.216 A:middle
I can bring in a persistent
preview of any of the values.

399
00:22:07.896 --> 00:22:08.956 A:middle
That's our starting image...

400
00:22:10.936 --> 00:22:12.006 A:middle
and here's the two outputs.

401
00:22:12.816 --> 00:22:14.796 A:middle
Right now all three
look the same

402
00:22:14.796 --> 00:22:17.316 A:middle
because I haven't done
anything to process the image.

403
00:22:17.516 --> 00:22:19.076 A:middle
I'm just taking my source image

404
00:22:19.556 --> 00:22:21.186 A:middle
and drawing it raw
to the destination.

405
00:22:22.436 --> 00:22:25.096 A:middle
OK, the first step is
to crop to a circle.

406
00:22:25.096 --> 00:22:28.456 A:middle
I'm going to create a BÃ©zier
path with an oval inscribed

407
00:22:28.456 --> 00:22:30.496 A:middle
in our square, add that
to the clipping path

408
00:22:31.136 --> 00:22:32.426 A:middle
and now we have circular images.

409
00:22:32.696 --> 00:22:33.636 A:middle
Things look good.

410
00:22:35.406 --> 00:22:37.306 A:middle
I'd also like to
desaturate my image.

411
00:22:37.656 --> 00:22:39.996 A:middle
I'm going to simply wash
over it with a white color

412
00:22:39.996 --> 00:22:43.756 A:middle
and use a special core graphics
blend mode that subtracts

413
00:22:43.756 --> 00:22:46.046 A:middle
out the color instead
of adding white on top.

414
00:22:46.696 --> 00:22:49.296 A:middle
And now you can see that
our third call produces a

415
00:22:49.296 --> 00:22:50.296 A:middle
desaturated image.

416
00:22:51.066 --> 00:22:51.866 A:middle
Things look great.

417
00:22:52.106 --> 00:22:54.646 A:middle
I'm ready to start using
this in my application.

418
00:22:54.646 --> 00:23:04.606 A:middle
Going to grab a copy of this
code and head over to my class

419
00:23:04.606 --> 00:23:05.386 A:middle
that I've been working on.

420
00:23:05.976 --> 00:23:07.286 A:middle
Here's my prepareImage function.

421
00:23:07.766 --> 00:23:08.876 A:middle
It's not implemented yet.

422
00:23:09.076 --> 00:23:11.106 A:middle
I'm simply going to paste in
my code from the playground

423
00:23:11.626 --> 00:23:13.716 A:middle
and I'm ready to start
using this in my storyboard.

424
00:23:13.716 --> 00:23:17.256 A:middle
I'll option-click here to
open it in the Assistant.

425
00:23:18.866 --> 00:23:20.866 A:middle
And down in the lower
left corner you'll see the

426
00:23:20.866 --> 00:23:21.546 A:middle
square view.

427
00:23:21.546 --> 00:23:24.466 A:middle
This is where I'd like my
circular image view to be.

428
00:23:25.926 --> 00:23:29.526 A:middle
In Interface Builder's Inspector
I can see this is still an

429
00:23:29.526 --> 00:23:31.166 A:middle
incidence in just regular UIBO.

430
00:23:33.196 --> 00:23:35.976 A:middle
I'll type, Interface
Builder will autocomplete,

431
00:23:36.106 --> 00:23:38.406 A:middle
and you'll see it filled
in the module name as well.

432
00:23:39.516 --> 00:23:42.086 A:middle
My circular image view class
is defined in a framework,

433
00:23:42.686 --> 00:23:44.686 A:middle
while my storyboard is
in the main application.

434
00:23:45.046 --> 00:23:47.826 A:middle
So the module name and the
class name together complete the

435
00:23:47.826 --> 00:23:48.806 A:middle
reference to my class.

436
00:23:51.706 --> 00:23:53.956 A:middle
Now, I've still got
a white square here.

437
00:23:54.276 --> 00:23:57.106 A:middle
At this point Interface Builder
is doing what it's always been

438
00:23:57.106 --> 00:23:58.016 A:middle
capable of doing.

439
00:23:58.456 --> 00:24:01.096 A:middle
It's saying this UIView
will be an incidence

440
00:24:01.096 --> 00:24:03.006 A:middle
of the circular image
view at runtime.

441
00:24:03.756 --> 00:24:05.676 A:middle
In Xcode 6, we can
make it an incidence

442
00:24:05.676 --> 00:24:08.306 A:middle
of the circular imageView
at design time as well.

443
00:24:08.306 --> 00:24:09.916 A:middle
Let me show you how to do that.

444
00:24:10.966 --> 00:24:12.956 A:middle
We've added a couple of
new source attributes

445
00:24:12.956 --> 00:24:14.506 A:middle
that you can add
to your classes.

446
00:24:15.036 --> 00:24:16.886 A:middle
The first is IBDesignable.

447
00:24:17.416 --> 00:24:19.236 A:middle
It goes right here at
the top of your class,

448
00:24:20.006 --> 00:24:21.616 A:middle
goes in the same
place for Objective-C,

449
00:24:21.616 --> 00:24:23.146 A:middle
spelled a little
bit differently,

450
00:24:23.146 --> 00:24:24.756 A:middle
but it has the exact
same result.

451
00:24:25.586 --> 00:24:27.386 A:middle
Interface Builder is
able to take our class,

452
00:24:27.966 --> 00:24:30.536 A:middle
build our framework,
instantiate it,

453
00:24:30.536 --> 00:24:32.166 A:middle
and render it live
into the canvas.

454
00:24:32.776 --> 00:24:33.706 A:middle
You can see it here.

455
00:24:34.496 --> 00:24:36.006 A:middle
Now, you may be wondering,

456
00:24:37.146 --> 00:24:38.626 A:middle
"where is that silhouette
coming from?"

457
00:24:40.826 --> 00:24:43.386 A:middle
Down here in my source file
I've overridden a new method,

458
00:24:43.386 --> 00:24:45.036 A:middle
prepareForInterfaceBuilder.

459
00:24:45.696 --> 00:24:48.696 A:middle
This is going to be invoked on
our view right before it renders

460
00:24:48.696 --> 00:24:51.066 A:middle
into the canvas, and it's
a last minute chance for us

461
00:24:51.066 --> 00:24:52.416 A:middle
to do any additional setup.

462
00:24:53.066 --> 00:24:54.566 A:middle
Here, I'm simply making sure

463
00:24:54.566 --> 00:24:56.166 A:middle
that we always have
an image prepared.

464
00:24:58.386 --> 00:25:01.736 A:middle
Now, I'd like to just
configure my image directly

465
00:25:01.736 --> 00:25:04.696 A:middle
in Interface Builder, and
option in my saturation as well.

466
00:25:05.996 --> 00:25:06.756 A:middle
No problem.

467
00:25:07.036 --> 00:25:10.466 A:middle
We have another new source
attribute: IBInspectable.

468
00:25:10.466 --> 00:25:14.036 A:middle
I can put it here in front of
my property, and when I return

469
00:25:14.036 --> 00:25:18.326 A:middle
to Interface Builder
I can see in Inspector

470
00:25:18.326 --> 00:25:20.396 A:middle
that they have two new fields
that've directly derived

471
00:25:20.396 --> 00:25:21.136 A:middle
these values.

472
00:25:22.566 --> 00:25:23.466 A:middle
Let's pick another image.

473
00:25:25.036 --> 00:25:28.816 A:middle
All right, that looks great,
but when the user comes here,

474
00:25:28.816 --> 00:25:32.836 A:middle
I'd like them to be focused on
this photograph, not distracted

475
00:25:32.836 --> 00:25:34.756 A:middle
by the bright colors
in this player image.

476
00:25:35.446 --> 00:25:36.986 A:middle
That's where our
saturation comes into play.

477
00:25:37.956 --> 00:25:39.246 A:middle
Let's tone this down a bit.

478
00:25:39.246 --> 00:25:41.126 A:middle
You can see the canvas
is updating right away.

479
00:25:41.966 --> 00:25:43.246 A:middle
And things look good.

480
00:25:43.246 --> 00:25:45.956 A:middle
Let's make sure it looks
good with another image.

481
00:25:47.156 --> 00:25:49.186 A:middle
Oh, yikes, she got squished.

482
00:25:49.846 --> 00:25:53.036 A:middle
I'm not sure what's
going on here,

483
00:25:53.036 --> 00:25:54.796 A:middle
but I suspect it probably
has something to do

484
00:25:54.796 --> 00:25:56.706 A:middle
with my prepareImage
function that I just wrote.

485
00:25:56.706 --> 00:25:59.686 A:middle
I'm going to go ahead and
put a breakpoint here.

486
00:26:02.176 --> 00:26:07.556 A:middle
And with my view selected, I
can choose Debug Selected Views.

487
00:26:08.156 --> 00:26:09.846 A:middle
Interface Builder is going
to kick off a request

488
00:26:09.846 --> 00:26:11.346 A:middle
to render this view
live in the canvas

489
00:26:11.626 --> 00:26:13.296 A:middle
so that I can see
just what's going on.

490
00:26:14.516 --> 00:26:20.096 A:middle
[ Applause ]

491
00:26:20.596 --> 00:26:23.266 A:middle
Now, I'm not sure what
the problem is here,

492
00:26:23.266 --> 00:26:24.046 A:middle
but stepping into the code...

493
00:26:24.046 --> 00:26:26.746 A:middle
Oh, actually I can
see it right away.

494
00:26:27.396 --> 00:26:29.376 A:middle
Bringing up the Quick
Help -- the Quick Look --

495
00:26:29.376 --> 00:26:31.836 A:middle
on this rectangle, I can see
it really is a rectangle.

496
00:26:31.836 --> 00:26:33.346 A:middle
It's much wider than it is tall.

497
00:26:33.346 --> 00:26:35.716 A:middle
And interface Builder is
taking that rectangular image,

498
00:26:35.716 --> 00:26:38.846 A:middle
or my view is, and squishing
it down into that square

499
00:26:38.846 --> 00:26:40.266 A:middle
and we're getting
this crushed image.

500
00:26:40.946 --> 00:26:44.716 A:middle
I think what I want instead
is to produce a square image

501
00:26:45.126 --> 00:26:47.616 A:middle
and draw the source image
centered in the destination.

502
00:26:50.286 --> 00:26:51.886 A:middle
Interface Builder is going
to automatically pick

503
00:26:51.886 --> 00:26:53.776 A:middle
up my changes, re-render
the canvas...

504
00:26:53.906 --> 00:26:55.516 A:middle
and I can see we're in business.

505
00:26:55.896 --> 00:26:59.476 A:middle
Things look great.

506
00:26:59.476 --> 00:26:59.766 A:middle
All right.

507
00:27:00.196 --> 00:27:01.266 A:middle
I'm done with this scene.

508
00:27:02.916 --> 00:27:05.536 A:middle
My next set of steps after
this is typically to head

509
00:27:05.536 --> 00:27:09.366 A:middle
over to my iPad storyboard and
make much the same set of edits.

510
00:27:09.366 --> 00:27:11.086 A:middle
Let me close this out...

511
00:27:11.086 --> 00:27:15.636 A:middle
head over to my iPad
storyboard...

512
00:27:16.076 --> 00:27:18.206 A:middle
and [sighs] I can see that
I have a lot of work to do.

513
00:27:18.496 --> 00:27:20.156 A:middle
I haven't even started
on this scene yet.

514
00:27:20.916 --> 00:27:21.736 A:middle
No problem.

515
00:27:21.996 --> 00:27:23.936 A:middle
Xcode 6 solves this
for us as well.

516
00:27:24.296 --> 00:27:27.606 A:middle
We have a new feature, Universal
Storyboards, that allow us

517
00:27:27.606 --> 00:27:28.946 A:middle
to build a single storyboard

518
00:27:28.946 --> 00:27:30.686 A:middle
to target both the
iPad and the iPhone.

519
00:27:30.686 --> 00:27:34.436 A:middle
I'm going to head back over
to my iPhone storyboard.

520
00:27:36.171 --> 00:27:38.171 A:middle
[ Applause ]

521
00:27:38.326 --> 00:27:38.666 A:middle
Thank you.

522
00:27:38.666 --> 00:27:40.616 A:middle
And I want to show you just
how easy it is to get started

523
00:27:40.616 --> 00:27:41.866 A:middle
with Universal Storyboards.

524
00:27:45.086 --> 00:27:48.566 A:middle
In the File Inspector there's a
new checkbox, Use Size Classes.

525
00:27:48.566 --> 00:27:50.066 A:middle
I'm going to go ahead
and enable them.

526
00:27:51.036 --> 00:27:53.586 A:middle
Size classes are a
foundational new technology

527
00:27:53.586 --> 00:27:54.906 A:middle
that form the underpinnings

528
00:27:54.906 --> 00:27:57.496 A:middle
of the new adaptive user
interfaces in iOS 8.

529
00:27:58.956 --> 00:28:01.656 A:middle
With size classes, I can
customize which views

530
00:28:01.656 --> 00:28:03.906 A:middle
and constraints participate
in each of my layouts.

531
00:28:05.906 --> 00:28:09.556 A:middle
Adopting size classes also
upgrades all of the segues

532
00:28:09.556 --> 00:28:12.046 A:middle
in my storyboard to their
new adaptive counterparts

533
00:28:12.046 --> 00:28:14.456 A:middle
from iOS 8 -- segues
that, for example,

534
00:28:14.556 --> 00:28:16.536 A:middle
know to present a
popover on the iPad

535
00:28:16.536 --> 00:28:18.306 A:middle
and a modal transition
on the iPhone.

536
00:28:19.566 --> 00:28:23.366 A:middle
Now, you can see Interface
Builder is rendering my canvas

537
00:28:23.366 --> 00:28:24.676 A:middle
here as this square.

538
00:28:25.586 --> 00:28:27.746 A:middle
This is an abstract
representation that's meant

539
00:28:27.746 --> 00:28:30.396 A:middle
to remind you that you're not
editing for a specific device,

540
00:28:30.676 --> 00:28:32.406 A:middle
you're editing for all devices.

541
00:28:33.286 --> 00:28:35.736 A:middle
If I want to see how things
look on a specific device,

542
00:28:36.306 --> 00:28:39.866 A:middle
I can open the Enhanced
Preview Editor in Xcode 6.

543
00:28:40.806 --> 00:28:43.146 A:middle
Here you can see that auto
layout does a great job

544
00:28:43.686 --> 00:28:46.806 A:middle
of translating my interface to
the screen of a 4-inch iPhone.

545
00:28:48.096 --> 00:28:53.146 A:middle
I can zoom out and I can
add more screens as well.

546
00:28:53.896 --> 00:28:55.476 A:middle
Here's how my interface
will be presented

547
00:28:55.576 --> 00:28:56.856 A:middle
on an iPad in portrait.

548
00:28:58.886 --> 00:29:00.106 A:middle
And you can see as well

549
00:29:00.106 --> 00:29:03.246 A:middle
that auto layout has translated
my screen all the way up.

550
00:29:03.336 --> 00:29:06.226 A:middle
But I had a custom
layout just for iPad.

551
00:29:07.326 --> 00:29:08.826 A:middle
How do I achieve that
with this new feature?

552
00:29:09.666 --> 00:29:11.096 A:middle
Well, let's get started.

553
00:29:11.536 --> 00:29:12.766 A:middle
The first order of business is

554
00:29:12.766 --> 00:29:14.416 A:middle
that this top bar
should be short.

555
00:29:14.416 --> 00:29:16.436 A:middle
I'm going to go ahead
and shorten it up

556
00:29:17.396 --> 00:29:19.376 A:middle
and tell Interface Builder
to update the constants

557
00:29:19.376 --> 00:29:21.716 A:middle
of all my constraints from
the frames in the canvas.

558
00:29:22.106 --> 00:29:25.406 A:middle
And, well, you can see
they both got short.

559
00:29:25.786 --> 00:29:28.066 A:middle
Well, I'm editing both
interfaces at once;

560
00:29:28.066 --> 00:29:29.226 A:middle
it's a universal storyboard.

561
00:29:29.346 --> 00:29:30.716 A:middle
How do I edit just one of them?

562
00:29:30.716 --> 00:29:33.126 A:middle
Let me undo this change.

563
00:29:35.426 --> 00:29:38.576 A:middle
Down here in the bottom center
of the canvas is a new control

564
00:29:38.576 --> 00:29:41.016 A:middle
for picking which size
class you're editing within.

565
00:29:41.526 --> 00:29:43.246 A:middle
Right now we're editing
the size class

566
00:29:43.246 --> 00:29:45.066 A:middle
for Any width at Any height.

567
00:29:45.066 --> 00:29:48.446 A:middle
It's the basis for all of them;
all layouts inherit from this.

568
00:29:49.566 --> 00:29:51.646 A:middle
It's represented as this
choice here in the center.

569
00:29:52.486 --> 00:29:55.936 A:middle
As I move away from the center
things get more specific.

570
00:29:57.056 --> 00:30:00.656 A:middle
Down here in the bottom right
corner is the Regular width,

571
00:30:00.656 --> 00:30:01.556 A:middle
Regular height layout.

572
00:30:01.866 --> 00:30:04.706 A:middle
It's the largest, and it's
the basis of my iPad layouts.

573
00:30:05.856 --> 00:30:06.706 A:middle
I'm going to choose it,

574
00:30:06.706 --> 00:30:09.516 A:middle
and Interface Builder enlarges
the canvas to remind me

575
00:30:09.516 --> 00:30:11.706 A:middle
that I'm working in a
specific size class now.

576
00:30:14.226 --> 00:30:15.896 A:middle
Let's go ahead and make
that bar shorter again

577
00:30:18.016 --> 00:30:19.136 A:middle
and update the constants.

578
00:30:21.866 --> 00:30:25.006 A:middle
And now you can see that the
iPad has changed while the

579
00:30:25.006 --> 00:30:26.756 A:middle
iPhone has remained just
the way that I designed it.

580
00:30:28.196 --> 00:30:29.346 A:middle
Down here in the bottom left

581
00:30:29.346 --> 00:30:31.846 A:middle
of the scene I have a
completely new layout in mind.

582
00:30:32.296 --> 00:30:34.196 A:middle
Rather than just editing
the constraint constants,

583
00:30:34.506 --> 00:30:35.676 A:middle
I want new constraints.

584
00:30:36.936 --> 00:30:37.696 A:middle
No problem.

585
00:30:37.956 --> 00:30:39.786 A:middle
I'll select all three
of these views

586
00:30:40.176 --> 00:30:42.636 A:middle
and have Interface Builder
clear the constraints

587
00:30:43.056 --> 00:30:46.306 A:middle
in only this size
class and reposition.

588
00:30:47.296 --> 00:30:49.116 A:middle
I'm going to have the
image front and center.

589
00:30:56.026 --> 00:30:57.126 A:middle
Hmm, right about there?

590
00:30:57.126 --> 00:30:58.706 A:middle
Maybe a little lower.

591
00:30:59.626 --> 00:31:02.786 A:middle
And I've sized this
image view arbitrarily.

592
00:31:02.906 --> 00:31:04.156 A:middle
I need to pin its size.

593
00:31:04.606 --> 00:31:06.616 A:middle
I'll start with an
explicit width constraint.

594
00:31:09.356 --> 00:31:11.516 A:middle
And now I've said that the
width should be, you'know,

595
00:31:11.616 --> 00:31:14.126 A:middle
some constant -- whatever this
happens to be (120 points).

596
00:31:14.126 --> 00:31:16.716 A:middle
I want the height to be the
same, but rather than duplicate

597
00:31:16.716 --> 00:31:19.166 A:middle
in the constant,
new since last year,

598
00:31:19.166 --> 00:31:21.916 A:middle
I can add an aspect ratio
constraint saying the width

599
00:31:21.916 --> 00:31:22.946 A:middle
and the height should be equal.

600
00:31:26.516 --> 00:31:30.516 A:middle
[ Applause ]

601
00:31:31.016 --> 00:31:36.000 A:middle
[ Background Sounds ]

602
00:31:36.516 --> 00:31:43.056 A:middle
[ Laughter and applause ]

603
00:31:43.556 --> 00:31:43.646 A:middle
Ahh...!

604
00:31:45.481 --> 00:31:47.481 A:middle
[ Laughter ]

605
00:31:47.946 --> 00:31:50.776 A:middle
I could continue those edits,
position the views underneath,

606
00:31:50.776 --> 00:31:52.796 A:middle
and have Interface Builder
add the remaining constraints

607
00:31:53.026 --> 00:31:55.266 A:middle
to produce an iPad
layout that was unique

608
00:31:55.266 --> 00:31:56.596 A:middle
to the iPad interface,

609
00:31:56.596 --> 00:31:59.536 A:middle
while maintaining my iPhone
layout just the way that it was.

610
00:32:00.096 --> 00:32:03.266 A:middle
Now, I'd like to turn it over to
Ken Orr to tell you what's new

611
00:32:03.266 --> 00:32:04.676 A:middle
with debugging in Xcode 6.

612
00:32:05.516 --> 00:32:11.886 A:middle
[ Applause ]

613
00:32:12.386 --> 00:32:14.086 A:middle
&gt;&gt; All right.

614
00:32:14.136 --> 00:32:14.876 A:middle
Thanks, Jon.

615
00:32:15.706 --> 00:32:16.186 A:middle
Good morning.

616
00:32:17.346 --> 00:32:19.726 A:middle
So I've just taken over
the photo details screen

617
00:32:19.726 --> 00:32:22.806 A:middle
from another engineer on our
Shutterbugs team, and I'd love

618
00:32:22.806 --> 00:32:24.466 A:middle
to give you a sneak
peek of that UI now.

619
00:32:25.316 --> 00:32:27.836 A:middle
OK, so the first thing I'm going
to do is I'm going to run...

620
00:32:32.646 --> 00:32:35.386 A:middle
and then we will sign
in to the game...

621
00:32:36.466 --> 00:32:39.686 A:middle
I'll navigate to this
in-progress game, and I'm going

622
00:32:39.686 --> 00:32:41.316 A:middle
to click on this
particular picture.

623
00:32:41.906 --> 00:32:44.666 A:middle
And then here we are at
the Photo Details UI.

624
00:32:45.056 --> 00:32:48.116 A:middle
So what we're seeing in
this case is a picture

625
00:32:48.116 --> 00:32:49.336 A:middle
that Paula took.

626
00:32:49.956 --> 00:32:53.466 A:middle
We see a list of all the other
players in the game along

627
00:32:53.466 --> 00:32:55.656 A:middle
with comments they've made
on this particular photo

628
00:32:55.926 --> 00:32:57.206 A:middle
and whether they like it or not.

629
00:32:59.406 --> 00:33:02.566 A:middle
And, you know, as I
look at this UI here,

630
00:33:03.546 --> 00:33:05.806 A:middle
I'm a little bit
skeptical that all

631
00:33:05.806 --> 00:33:08.496 A:middle
of these players are
missing their picture.

632
00:33:09.056 --> 00:33:10.856 A:middle
So they're all showing this
kind of placeholder image,

633
00:33:10.856 --> 00:33:12.956 A:middle
and that's not something
I'm expecting to see here.

634
00:33:13.676 --> 00:33:15.086 A:middle
So let's go ahead and
let's dig into that.

635
00:33:16.656 --> 00:33:21.576 A:middle
Now, I'm relatively new to
this code base, but I do know

636
00:33:21.576 --> 00:33:22.786 A:middle
that our problem here,

637
00:33:22.786 --> 00:33:24.406 A:middle
it's going to be in
one of two places.

638
00:33:24.836 --> 00:33:27.316 A:middle
So it's either going to be
on the model side of things,

639
00:33:27.536 --> 00:33:31.026 A:middle
that maybe the image data just
isn't there, or it's going to be

640
00:33:31.026 --> 00:33:33.746 A:middle
over on the UI side of
things: We have the image data,

641
00:33:33.746 --> 00:33:35.196 A:middle
but we're not pushing
it to the screen.

642
00:33:35.836 --> 00:33:39.276 A:middle
So we want to figure out
exactly where that problem is.

643
00:33:40.536 --> 00:33:42.666 A:middle
So the first thing I
need to do here is figure

644
00:33:42.666 --> 00:33:46.476 A:middle
out what view controller is
responsible for this view here.

645
00:33:47.146 --> 00:33:51.646 A:middle
And I think it is this guy,
photoDetailViewController.

646
00:33:51.946 --> 00:33:54.056 A:middle
So what I want to do is I
want to set a breakpoint

647
00:33:54.576 --> 00:33:56.456 A:middle
in this view to appear.

648
00:33:57.676 --> 00:33:59.876 A:middle
And then let's try to
trigger that and see

649
00:33:59.876 --> 00:34:01.316 A:middle
if we are in the right place.

650
00:34:02.096 --> 00:34:06.746 A:middle
We'll navigate away, we'll
come back, and there we go.

651
00:34:06.746 --> 00:34:08.346 A:middle
OK, we hit the breakpoint, good.

652
00:34:08.576 --> 00:34:10.056 A:middle
So we're probably
in the right place.

653
00:34:10.976 --> 00:34:14.025 A:middle
But I'd like to be really sure
that we're in the right place.

654
00:34:14.696 --> 00:34:18.576 A:middle
And I'm going to do that by
using the brand-new Quick Look

655
00:34:18.576 --> 00:34:20.235 A:middle
for UIView in Xcode.

656
00:34:20.746 --> 00:34:22.896 A:middle
So now I can just mouse
over this view here

657
00:34:22.896 --> 00:34:24.746 A:middle
to get the data tip,
which is the view owned

658
00:34:24.746 --> 00:34:26.866 A:middle
by this view controller,
and I can click

659
00:34:26.866 --> 00:34:28.106 A:middle
on our little Quick Look button.

660
00:34:28.496 --> 00:34:30.606 A:middle
And just like that I
can see a rendering.

661
00:34:31.516 --> 00:34:36.056 A:middle
[ Applause ]

662
00:34:36.556 --> 00:34:39.536 A:middle
Yeah. I can see a rendering
of this view or any subclass

663
00:34:39.536 --> 00:34:42.096 A:middle
of UIView right here in
Xcode while I'm stepping

664
00:34:42.096 --> 00:34:42.646 A:middle
through my code.

665
00:34:43.036 --> 00:34:44.946 A:middle
And of course if you're
developing a Mac app,

666
00:34:45.186 --> 00:34:46.576 A:middle
this works great for NSView too.

667
00:34:46.576 --> 00:34:48.235 A:middle
All right.

668
00:34:48.516 --> 00:34:51.835 A:middle
So now, step one complete; we
know we're in the right place.

669
00:34:52.056 --> 00:34:57.476 A:middle
Good. But what we care
about is the model objects.

670
00:34:58.246 --> 00:35:02.706 A:middle
And I think our model objects
are these GameComments.

671
00:35:03.076 --> 00:35:06.496 A:middle
Looks like we have a GameComment
for every row of data here.

672
00:35:06.906 --> 00:35:09.006 A:middle
So these rows are
backed by a GameComment.

673
00:35:10.406 --> 00:35:15.946 A:middle
Now, when I'm debugging, I
really love to use Quick Look.

674
00:35:16.336 --> 00:35:17.446 A:middle
I'm a really visual guy.

675
00:35:17.576 --> 00:35:21.496 A:middle
Quick Look is a really great
way to visualize my objects

676
00:35:21.496 --> 00:35:22.676 A:middle
when I'm stepping
through my code.

677
00:35:23.916 --> 00:35:27.166 A:middle
Wouldn't it be great if we
could have custom Quick Look

678
00:35:27.166 --> 00:35:29.846 A:middle
representations for
our own classes?

679
00:35:30.876 --> 00:35:33.436 A:middle
Well, in fact, now inside of
Xcode you can do just that.

680
00:35:33.796 --> 00:35:35.026 A:middle
And we've gone through
our project

681
00:35:35.026 --> 00:35:37.086 A:middle
and done it all throughout
our classes.

682
00:35:37.486 --> 00:35:39.266 A:middle
Let's see if we have
one for this GameComment

683
00:35:39.266 --> 00:35:40.596 A:middle
that we're investigating.

684
00:35:41.866 --> 00:35:43.186 A:middle
And sure enough we do.

685
00:35:43.186 --> 00:35:46.166 A:middle
And what we'll see is

686
00:35:46.166 --> 00:35:50.086 A:middle
that somebody's implemented this
new debugQuickLookObject method.

687
00:35:50.666 --> 00:35:53.496 A:middle
So this is a method that you can
implement in your own classes.

688
00:35:54.486 --> 00:35:56.426 A:middle
And it's a method
that Xcode will call

689
00:35:56.426 --> 00:35:59.056 A:middle
when you initiate a Quick
Look from the debugger.

690
00:36:00.796 --> 00:36:03.266 A:middle
Now, from this method
you can return anything

691
00:36:03.266 --> 00:36:05.176 A:middle
that has a built-in
Quick Look inside Xcode.

692
00:36:05.176 --> 00:36:11.086 A:middle
So maybe an image, or a
BÃ©zier path, or a string,

693
00:36:12.036 --> 00:36:15.156 A:middle
or in this case an attributed
string, which is going

694
00:36:15.156 --> 00:36:17.576 A:middle
to let us have a little bit
more complex visualization.

695
00:36:17.576 --> 00:36:20.496 A:middle
So we're going to be able
to take text and an image

696
00:36:20.636 --> 00:36:24.076 A:middle
and put those together
in a nice visualization

697
00:36:24.266 --> 00:36:25.176 A:middle
of our model object.

698
00:36:26.006 --> 00:36:26.646 A:middle
Now, I'm really curious.

699
00:36:26.646 --> 00:36:28.096 A:middle
I want to see what this
actually looks like.

700
00:36:28.776 --> 00:36:32.446 A:middle
So let's go back to where we're
paused and I'm going to mouse

701
00:36:32.446 --> 00:36:34.286 A:middle
over our GameComments array.

702
00:36:34.286 --> 00:36:36.726 A:middle
I can see that there's three of
them, which matches what I see

703
00:36:36.726 --> 00:36:37.986 A:middle
on the screen; that's good.

704
00:36:38.706 --> 00:36:41.626 A:middle
And then I'm just going to press
the Quick Look button, and,

705
00:36:41.626 --> 00:36:46.326 A:middle
boom, just like that, I'm seeing
my model object exactly the way

706
00:36:46.516 --> 00:36:46.966 A:middle
I wanted to see it.

707
00:36:47.516 --> 00:36:50.596 A:middle
[ Applause ]

708
00:36:51.096 --> 00:36:52.956 A:middle
And of course we can
arrow down through these.

709
00:36:53.836 --> 00:36:54.576 A:middle
Annnd... great.

710
00:36:54.696 --> 00:36:56.856 A:middle
So now we know we've
eliminated the model

711
00:36:57.426 --> 00:36:59.516 A:middle
as being our source
of our problem here.

712
00:36:59.516 --> 00:37:01.266 A:middle
We can see the player
image is right here,

713
00:37:01.866 --> 00:37:03.636 A:middle
so we know it's not
a model side issue.

714
00:37:04.926 --> 00:37:06.156 A:middle
So let's get rid
of this breakpoint

715
00:37:06.156 --> 00:37:07.736 A:middle
and let's continue onward.

716
00:37:10.226 --> 00:37:15.466 A:middle
OK, so the issue must be up
here in the UI, and, you know,

717
00:37:15.466 --> 00:37:19.306 A:middle
whatever view is responsible
for drawing this bit

718
00:37:19.306 --> 00:37:21.286 A:middle
of UI isn't doing its job.

719
00:37:22.986 --> 00:37:25.326 A:middle
Now, like I said, I'm
new to this code base.

720
00:37:25.896 --> 00:37:29.216 A:middle
I'm not really sure what
views are responsible

721
00:37:29.476 --> 00:37:32.076 A:middle
for pushing these particular
pixels to the screen.

722
00:37:33.336 --> 00:37:34.546 A:middle
So how are we going
to deal with that?

723
00:37:35.296 --> 00:37:37.786 A:middle
How are we going to
debug this issue?

724
00:37:39.486 --> 00:37:44.766 A:middle
Well, Xcode 6 introduces a brand
new way to visualize your app

725
00:37:45.176 --> 00:37:45.796 A:middle
when you're debugging.

726
00:37:46.486 --> 00:37:48.856 A:middle
So you can press this new
Debug View Hierarchy button

727
00:37:48.856 --> 00:37:49.236 A:middle
right here.

728
00:37:50.246 --> 00:37:52.546 A:middle
And Xcode will pull
in a representation

729
00:37:52.616 --> 00:37:55.856 A:middle
of your entire view hierarchy
right inside of Xcode

730
00:37:56.516 --> 00:37:59.676 A:middle
where you can see things like
snapshots of all your views,

731
00:38:00.176 --> 00:38:02.116 A:middle
their frames, and all sorts

732
00:38:02.116 --> 00:38:03.846 A:middle
of other interesting
properties that...

733
00:38:03.846 --> 00:38:05.066 A:middle
when you combine them together,

734
00:38:05.436 --> 00:38:07.676 A:middle
they help to give you a
really great understanding

735
00:38:07.676 --> 00:38:11.016 A:middle
of why your app looks
the way it does.

736
00:38:11.446 --> 00:38:12.336 A:middle
Or maybe more importantly,

737
00:38:12.336 --> 00:38:14.756 A:middle
why it doesn't quite
match your expectations.

738
00:38:15.796 --> 00:38:19.046 A:middle
So I can, for example, let's
click on this label here

739
00:38:19.536 --> 00:38:20.836 A:middle
and open the Inspector.

740
00:38:22.176 --> 00:38:25.116 A:middle
And I can see that
this is a UI label.

741
00:38:25.696 --> 00:38:26.926 A:middle
I can see its text.

742
00:38:27.256 --> 00:38:28.456 A:middle
I can see its font.

743
00:38:28.696 --> 00:38:30.526 A:middle
I can see its font color.

744
00:38:31.106 --> 00:38:34.296 A:middle
All the things that I'm used to
seeing when I'm designing my UI

745
00:38:34.476 --> 00:38:37.136 A:middle
in IB, well, I can
see those right now

746
00:38:37.136 --> 00:38:38.666 A:middle
when I'm debugging it as well.

747
00:38:39.376 --> 00:38:40.296 A:middle
Really, really powerful.

748
00:38:41.656 --> 00:38:43.286 A:middle
So what we care about, though,

749
00:38:43.286 --> 00:38:45.526 A:middle
is this little picture
right here.

750
00:38:45.766 --> 00:38:46.886 A:middle
So let's select that guy.

751
00:38:48.676 --> 00:38:52.756 A:middle
And what I'm interested in
seeing is what cell owns

752
00:38:52.756 --> 00:38:55.296 A:middle
that picture, so what cell
is probably doing the wiring

753
00:38:55.296 --> 00:38:57.756 A:middle
up of the model data
to the UI controls.

754
00:38:58.736 --> 00:39:03.736 A:middle
Now, I can use Xcode's jump bar
to see the entire view hierarchy

755
00:39:03.736 --> 00:39:07.526 A:middle
of the selected object, and
so I'm going to go up here

756
00:39:07.526 --> 00:39:09.286 A:middle
and I'm going to see that...

757
00:39:11.266 --> 00:39:14.716 A:middle
that view is in this
gameCommentTableView cell.

758
00:39:15.396 --> 00:39:17.696 A:middle
So let's find that over
here in the navigator,

759
00:39:17.816 --> 00:39:21.426 A:middle
and it's this guy, OK.

760
00:39:21.986 --> 00:39:26.486 A:middle
Looks like a very simple class.

761
00:39:27.536 --> 00:39:30.776 A:middle
It has this useGameComment
method

762
00:39:30.776 --> 00:39:34.376 A:middle
which takes the model data, and
then it looks like it wires it

763
00:39:35.416 --> 00:39:37.126 A:middle
up to the UI controls.

764
00:39:37.326 --> 00:39:41.276 A:middle
So what I see here is I see
that the player's name is pushed

765
00:39:41.276 --> 00:39:43.386 A:middle
into this player label.

766
00:39:43.776 --> 00:39:46.806 A:middle
I see that the comment is
pushed into the comment label.

767
00:39:47.916 --> 00:39:50.796 A:middle
What I don't see is I don't
see us taking that player image

768
00:39:50.796 --> 00:39:52.856 A:middle
and pushing that into anything.

769
00:39:53.546 --> 00:39:54.916 A:middle
So that's probably
our problem here.

770
00:39:55.776 --> 00:39:57.756 A:middle
And it was really easy to find

771
00:39:57.756 --> 00:39:59.636 A:middle
that using Xcode's
new View Debugger.

772
00:40:00.396 --> 00:40:01.836 A:middle
So I'll go ahead
and fix that later.

773
00:40:02.186 --> 00:40:03.756 A:middle
And that is probably
going to take care

774
00:40:03.756 --> 00:40:05.726 A:middle
of this missing image
that we're seeing.

775
00:40:06.996 --> 00:40:10.666 A:middle
But, you know, as I
look at the UI here,

776
00:40:12.056 --> 00:40:15.986 A:middle
it doesn't quite match the
design that I was looking

777
00:40:15.986 --> 00:40:17.236 A:middle
at earlier with my designer.

778
00:40:17.506 --> 00:40:20.136 A:middle
So there's supposed to actually
be a little button right

779
00:40:20.136 --> 00:40:21.986 A:middle
around here in the
bottom left of the picture

780
00:40:23.196 --> 00:40:25.126 A:middle
that lets me like this image.

781
00:40:25.126 --> 00:40:26.916 A:middle
So I'm supposed to come
to this UI and say,

782
00:40:26.916 --> 00:40:27.986 A:middle
"I like Paula's picture."

783
00:40:28.826 --> 00:40:30.436 A:middle
But right now I can't do that.

784
00:40:31.196 --> 00:40:35.056 A:middle
Now the question then
is where is that button?

785
00:40:36.386 --> 00:40:39.796 A:middle
Well, maybe the button was never
added to the view hierarchy.

786
00:40:40.956 --> 00:40:42.646 A:middle
Maybe it's hanging out
off-screen somewhere.

787
00:40:43.606 --> 00:40:45.206 A:middle
Maybe it's the wrong size.

788
00:40:45.706 --> 00:40:47.956 A:middle
Maybe its alpha component
is wrong.

789
00:40:47.956 --> 00:40:49.406 A:middle
Maybe it's hiding
behind another view.

790
00:40:49.706 --> 00:40:52.776 A:middle
There's all sorts of really
visual kinds of problems

791
00:40:52.936 --> 00:40:54.246 A:middle
that we could have
with this control.

792
00:40:54.246 --> 00:40:56.816 A:middle
And they're all made
really easy to track

793
00:40:56.816 --> 00:40:58.346 A:middle
down with the new View Debugger.

794
00:40:58.616 --> 00:41:03.076 A:middle
So let's go back over here
to Xcode and let's look

795
00:41:03.076 --> 00:41:04.076 A:middle
at our view hierarchy again.

796
00:41:04.076 --> 00:41:05.616 A:middle
So what I want to do
now is I just want

797
00:41:05.616 --> 00:41:06.796 A:middle
to explore this view hierarchy.

798
00:41:06.796 --> 00:41:10.526 A:middle
I want to look through and see
if that button is in fact here.

799
00:41:11.416 --> 00:41:13.416 A:middle
So the first thing I'll
do is I'll just sort

800
00:41:13.416 --> 00:41:15.316 A:middle
of twist this guy sideways.

801
00:41:15.316 --> 00:41:17.576 A:middle
I want to peek behind
some of these other views.

802
00:41:20.516 --> 00:41:23.356 A:middle
[ Applause ]

803
00:41:23.856 --> 00:41:27.906 A:middle
Sure. And then I want to
pull these views apart.

804
00:41:28.056 --> 00:41:32.086 A:middle
So let's do that and, hey,

805
00:41:32.086 --> 00:41:34.666 A:middle
I see a little something
peeking out right back here.

806
00:41:36.126 --> 00:41:37.266 A:middle
That could be our button,

807
00:41:37.596 --> 00:41:38.836 A:middle
but there's still
some stuff in the way.

808
00:41:39.116 --> 00:41:41.326 A:middle
So I want to peel back some
of the views in the front

809
00:41:41.326 --> 00:41:44.296 A:middle
so I can just hide things
from the front backwards.

810
00:41:45.266 --> 00:41:46.596 A:middle
Yeah, very nice.

811
00:41:47.516 --> 00:41:51.576 A:middle
[ Applause ]

812
00:41:52.076 --> 00:41:54.816 A:middle
And sure enough our button
is hanging out right here.

813
00:41:55.546 --> 00:41:57.676 A:middle
So let's select that.

814
00:41:57.676 --> 00:41:59.876 A:middle
And the next question
I'm asking myself is,

815
00:41:59.876 --> 00:42:01.946 A:middle
"Why is our button down here?"

816
00:42:02.496 --> 00:42:05.206 A:middle
And I know we're using auto
layout in this project,

817
00:42:05.786 --> 00:42:08.456 A:middle
so I'd like to look
at the constraints

818
00:42:08.456 --> 00:42:10.556 A:middle
that we're using here so
I can show the constraints

819
00:42:10.726 --> 00:42:11.776 A:middle
for this particular view.

820
00:42:12.946 --> 00:42:16.316 A:middle
And just like that, Xcode
hides all the other views

821
00:42:16.316 --> 00:42:19.246 A:middle
that aren't relevant and
shows me just the constraints

822
00:42:19.246 --> 00:42:21.096 A:middle
for this particular control.

823
00:42:22.516 --> 00:42:27.516 A:middle
[ Applause ]

824
00:42:28.016 --> 00:42:31.206 A:middle
And we can really easily see
that the button is pinned

825
00:42:31.206 --> 00:42:34.366 A:middle
to the bottom left, which
is not where we want it.

826
00:42:34.626 --> 00:42:37.466 A:middle
We want it pinned to the
bottom of the picture above.

827
00:42:38.156 --> 00:42:40.906 A:middle
So that's something that
might be really hard to track

828
00:42:40.906 --> 00:42:44.046 A:middle
down before but is really
easy to track down now.

829
00:42:46.686 --> 00:42:53.256 A:middle
OK, so with Xcode 6, as we've
seen, you have the ability

830
00:42:53.256 --> 00:42:54.406 A:middle
to visualize your app

831
00:42:54.446 --> 00:42:56.996 A:middle
when you're debugging
like never before.

832
00:42:58.146 --> 00:43:00.276 A:middle
You can create custom
Quick Look representations

833
00:43:00.326 --> 00:43:04.456 A:middle
of your own classes that show
your data exactly the way

834
00:43:04.456 --> 00:43:05.306 A:middle
that you want to see it.

835
00:43:06.486 --> 00:43:09.846 A:middle
And view debugging, well, that
adds an entire new dimension

836
00:43:09.846 --> 00:43:12.166 A:middle
to the way you can
explore and interact

837
00:43:12.216 --> 00:43:13.446 A:middle
with your app at runtime.

838
00:43:14.176 --> 00:43:15.196 A:middle
Really, really powerful.

839
00:43:15.196 --> 00:43:17.256 A:middle
And I think you're going to find
it really insightful as well.

840
00:43:18.526 --> 00:43:20.966 A:middle
And with that, I'd like to
turn it over to Kate Stone

841
00:43:21.186 --> 00:43:21.946 A:middle
to talk a little bit more

842
00:43:21.946 --> 00:43:24.786 A:middle
about how we can enhance
the performance of our app.

843
00:43:24.786 --> 00:43:25.046 A:middle
Thank you.

844
00:43:26.516 --> 00:43:30.196 A:middle
[ Applause ]

845
00:43:30.696 --> 00:43:31.496 A:middle
&gt;&gt; Thank you, Ken.

846
00:43:31.496 --> 00:43:33.236 A:middle
It looks like we have
a spectacular game

847
00:43:33.236 --> 00:43:33.866 A:middle
coming together.

848
00:43:33.916 --> 00:43:36.456 A:middle
We think our users are going
to be really happy with a lot

849
00:43:36.456 --> 00:43:37.436 A:middle
of these new features...

850
00:43:38.246 --> 00:43:40.896 A:middle
if we can just make sure that
we ship a quality product.

851
00:43:40.896 --> 00:43:42.236 A:middle
And of course that's
the last piece

852
00:43:42.236 --> 00:43:44.646 A:middle
of the development process, is
to make sure that what we're

853
00:43:44.646 --> 00:43:46.526 A:middle
about to send out into
the world is going

854
00:43:46.526 --> 00:43:47.816 A:middle
to live up to expectations.

855
00:43:48.576 --> 00:43:51.016 A:middle
My team has done the right
thing every step of the way.

856
00:43:51.376 --> 00:43:54.116 A:middle
We've tried to make sure that
what we have is a product

857
00:43:54.356 --> 00:43:57.196 A:middle
that is high-quality because,
of course, we've got a set

858
00:43:57.196 --> 00:44:00.146 A:middle
of unit tests that
are running on this.

859
00:44:00.556 --> 00:44:02.096 A:middle
So I've got the product
up and running.

860
00:44:02.266 --> 00:44:03.996 A:middle
I can go to my Test navigator.

861
00:44:05.396 --> 00:44:06.776 A:middle
And the Test navigator shows

862
00:44:06.776 --> 00:44:08.916 A:middle
that I have several
suites of unit tests here.

863
00:44:09.446 --> 00:44:11.536 A:middle
So I can go ahead and
run those one last time,

864
00:44:11.866 --> 00:44:14.136 A:middle
make sure that when the
game comes up we put it

865
00:44:14.136 --> 00:44:16.196 A:middle
through its paces, we're
green across the board.

866
00:44:16.196 --> 00:44:16.436 A:middle
Looks good.

867
00:44:16.436 --> 00:44:18.436 A:middle
From a functional perspective,

868
00:44:18.836 --> 00:44:20.506 A:middle
the game is doing
exactly what we expect.

869
00:44:21.426 --> 00:44:23.786 A:middle
And that's great because I've
got one last change I wanted

870
00:44:23.786 --> 00:44:24.476 A:middle
to make to the game.

871
00:44:25.136 --> 00:44:27.716 A:middle
I was thinking about
tinkering with some new filters

872
00:44:27.756 --> 00:44:29.866 A:middle
to give a little bit
more life to our images.

873
00:44:30.216 --> 00:44:32.036 A:middle
And specifically here,
I've taken advantage

874
00:44:32.086 --> 00:44:34.866 A:middle
of a Swift feature to
let me build an extension

875
00:44:34.866 --> 00:44:36.086 A:middle
to the UIImage class.

876
00:44:36.946 --> 00:44:39.636 A:middle
So I can take an existing
class and add the ability

877
00:44:39.636 --> 00:44:40.836 A:middle
to apply filters to it.

878
00:44:40.836 --> 00:44:42.496 A:middle
And so I have a variety
of filters here.

879
00:44:43.616 --> 00:44:45.896 A:middle
The "vignette" filter is one I
was thinking about toying with.

880
00:44:46.336 --> 00:44:48.306 A:middle
So maybe I should go ahead
and build one more test,

881
00:44:48.956 --> 00:44:52.006 A:middle
but this time a performance test
to make sure it's going to live

882
00:44:52.006 --> 00:44:53.306 A:middle
up to my expectations.

883
00:44:54.136 --> 00:44:54.866 A:middle
It's straightforward.

884
00:44:55.306 --> 00:44:57.316 A:middle
All I do is go and
ask for one new file,

885
00:44:59.136 --> 00:45:01.646 A:middle
pick the test case class you're
probably already familiar with.

886
00:45:03.746 --> 00:45:05.656 A:middle
I'm going to go ahead
and use Swift for that.

887
00:45:05.656 --> 00:45:07.726 A:middle
And you'll note that of
course like all templates,

888
00:45:07.946 --> 00:45:11.186 A:middle
I have that choice of Swift or
Objective-C, but Xcode knows

889
00:45:11.186 --> 00:45:12.956 A:middle
that I've been using Swift
throughout the conference,

890
00:45:13.266 --> 00:45:14.426 A:middle
so it's the default for me.

891
00:45:15.786 --> 00:45:17.406 A:middle
I'm going to call
this "PerfTests,"

892
00:45:18.786 --> 00:45:20.906 A:middle
put it in my existing
group with my tests

893
00:45:22.626 --> 00:45:24.626 A:middle
and let Xcode create
that file for me.

894
00:45:24.926 --> 00:45:26.876 A:middle
So now I have what
should be fairly familiar.

895
00:45:26.976 --> 00:45:28.306 A:middle
It's got the usual setup

896
00:45:28.306 --> 00:45:30.476 A:middle
and teardown methods,
but written in Swift.

897
00:45:31.376 --> 00:45:32.416 A:middle
It's got a functional test.

898
00:45:33.196 --> 00:45:34.726 A:middle
We're not focused on
any of those today,

899
00:45:34.786 --> 00:45:36.746 A:middle
so I'll just set
those aside and focus

900
00:45:36.746 --> 00:45:39.196 A:middle
on the one new method
that's been put in place:

901
00:45:39.946 --> 00:45:41.966 A:middle
the ability to test
for performance.

902
00:45:42.796 --> 00:45:45.666 A:middle
So I'm going to
testFilterPerformance here.

903
00:45:46.516 --> 00:45:50.226 A:middle
And all I need to do is fill
in this measureBlock call.

904
00:45:50.516 --> 00:45:53.476 A:middle
Now, you saw the Objective-C
syntax on a slide earlier.

905
00:45:53.856 --> 00:45:56.536 A:middle
The Swift syntax
is really clean.

906
00:45:56.906 --> 00:46:00.716 A:middle
It's just a call to measureBlock
that passes one trailing closure

907
00:46:01.036 --> 00:46:02.186 A:middle
that does the actual work.

908
00:46:02.966 --> 00:46:06.826 A:middle
And so in this case for my work,
I'm going to go ahead and fill

909
00:46:06.826 --> 00:46:09.376 A:middle
in a test image (I'll pick
up one of the player images)

910
00:46:09.726 --> 00:46:11.996 A:middle
and then go ahead and apply
a vignette filter to that.

911
00:46:12.656 --> 00:46:16.336 A:middle
But the vignette filter's
not part of my test project.

912
00:46:16.646 --> 00:46:18.886 A:middle
So, again, we're getting a
live issue here, reminding me

913
00:46:19.136 --> 00:46:21.256 A:middle
that I don't have access
to that class directly.

914
00:46:21.876 --> 00:46:26.886 A:middle
So all I need to do is
import the Shutterbugs module

915
00:46:26.886 --> 00:46:29.926 A:middle
and I have everything I
need to exercise the test;

916
00:46:30.366 --> 00:46:33.146 A:middle
indexing has found the
test; I'm one click away

917
00:46:33.146 --> 00:46:35.476 A:middle
from building my project
and running that test

918
00:46:35.576 --> 00:46:37.066 A:middle
and seeing just how
long this takes.

919
00:46:38.256 --> 00:46:40.396 A:middle
It's going to run it a
number of times to figure

920
00:46:40.396 --> 00:46:42.816 A:middle
out how long it takes and
whether there's any variation.

921
00:46:43.066 --> 00:46:45.256 A:middle
And when it's done, it will
tell me exactly how long it took

922
00:46:45.256 --> 00:46:48.046 A:middle
to run and what kind of
standard deviation I'm seeing;

923
00:46:48.046 --> 00:46:49.316 A:middle
4 percent in this case.

924
00:46:49.626 --> 00:46:52.676 A:middle
So I'm getting pretty consistent
run-to-run timings on this.

925
00:46:53.726 --> 00:46:56.566 A:middle
Sounds good, but it's
taking a little longer

926
00:46:56.566 --> 00:46:58.176 A:middle
than I wanted it to.

927
00:46:58.396 --> 00:47:01.026 A:middle
So what I'd really like to
do is twist this open and see

928
00:47:01.026 --> 00:47:02.516 A:middle
that I haven't set a baseline.

929
00:47:02.516 --> 00:47:04.976 A:middle
I haven't set a target
for my timing,

930
00:47:05.186 --> 00:47:06.426 A:middle
and I really wanted the target.

931
00:47:06.426 --> 00:47:08.456 A:middle
I wanted something
that was snappy to live

932
00:47:08.456 --> 00:47:09.956 A:middle
up to our users' expectations.

933
00:47:10.326 --> 00:47:12.856 A:middle
So I can go and establish
a baseline either based

934
00:47:12.856 --> 00:47:16.326 A:middle
on what I have now, or I can
go in and edit that and say,

935
00:47:16.326 --> 00:47:19.956 A:middle
you know, 0.25 seconds is
more what I had in mind here.

936
00:47:20.396 --> 00:47:23.276 A:middle
And now I'll get a reminder
every time I run this test

937
00:47:24.256 --> 00:47:26.566 A:middle
that I'm not living
up to expectations.

938
00:47:26.876 --> 00:47:30.436 A:middle
This test is going to fail red
because it wasn't fast enough.

939
00:47:30.986 --> 00:47:33.396 A:middle
Well, we could take time
to tinker with that,

940
00:47:33.396 --> 00:47:37.236 A:middle
but I did apply a number of
different filters as extensions

941
00:47:37.316 --> 00:47:39.006 A:middle
to UIImage here, so
let me just go back

942
00:47:39.006 --> 00:47:40.346 A:middle
and choose another one of these.

943
00:47:40.946 --> 00:47:42.656 A:middle
I'm going to use
the noir filter.

944
00:47:44.966 --> 00:47:47.176 A:middle
Rebuild, retest and make sure

945
00:47:47.176 --> 00:47:48.836 A:middle
that that's meeting
expectations.

946
00:47:49.836 --> 00:47:51.106 A:middle
Looks good; we're all green.

947
00:47:51.106 --> 00:47:52.556 A:middle
So across the board we're

948
00:47:52.556 --> 00:47:54.236 A:middle
in great shape to
ship this product.

949
00:47:54.726 --> 00:47:55.856 A:middle
But what if I'd had a problem

950
00:47:55.856 --> 00:47:57.746 A:middle
that I wasn't able
to take care of here?

951
00:47:58.146 --> 00:48:00.756 A:middle
What if I had a performance
issue I needed to investigate?

952
00:48:00.756 --> 00:48:03.276 A:middle
Well, of course Instruments
is the answer

953
00:48:03.276 --> 00:48:04.456 A:middle
to all such questions.

954
00:48:04.886 --> 00:48:06.746 A:middle
Instruments is a great
way to get more detail

955
00:48:06.796 --> 00:48:08.376 A:middle
about what's going
on in your project.

956
00:48:08.736 --> 00:48:11.326 A:middle
So I'm just going to bring up
a context menu for this test

957
00:48:12.026 --> 00:48:15.906 A:middle
and choose to profile that
particular filter exercise.

958
00:48:17.776 --> 00:48:19.116 A:middle
Behind the scenes,
we're going to go ahead

959
00:48:19.116 --> 00:48:20.986 A:middle
and build specifically
for profiling

960
00:48:21.216 --> 00:48:22.206 A:middle
and launch Instruments.

961
00:48:22.466 --> 00:48:25.436 A:middle
And now we get our first glimpse
of the new Instruments UI.

962
00:48:26.596 --> 00:48:28.966 A:middle
Instruments has been overhauled
dramatically this release,

963
00:48:29.306 --> 00:48:32.476 A:middle
both to be consistent with
the new OS X Yosemite,

964
00:48:32.886 --> 00:48:35.006 A:middle
but also so that it's
more familiar for people

965
00:48:35.006 --> 00:48:36.846 A:middle
who are comfortable
with Xcode already.

966
00:48:37.656 --> 00:48:39.436 A:middle
We start off with
the Template Chooser.

967
00:48:39.896 --> 00:48:43.246 A:middle
Here, I can see at a glance
what device I'm targeting,

968
00:48:44.136 --> 00:48:47.156 A:middle
what I'm planning on running,
and find the right template

969
00:48:47.326 --> 00:48:48.866 A:middle
to exercise what
I'm looking for.

970
00:48:48.866 --> 00:48:50.616 A:middle
And I'm just going to look
at memory in this case.

971
00:48:51.406 --> 00:48:54.636 A:middle
I can look at what I've
been using recently or pick

972
00:48:54.666 --> 00:48:55.426 A:middle
from the complete list.

973
00:48:56.616 --> 00:48:59.446 A:middle
When I choose that template, I
then go into Instruments proper,

974
00:48:59.686 --> 00:49:02.806 A:middle
and the Instruments main window
is also dramatically overhauled.

975
00:49:02.806 --> 00:49:04.206 A:middle
You'll see a few
things at a glance.

976
00:49:04.206 --> 00:49:06.406 A:middle
One is if it's not
immediately recording.

977
00:49:06.976 --> 00:49:08.796 A:middle
How many times have
you chosen a template,

978
00:49:09.266 --> 00:49:12.276 A:middle
found that it starts recording
immediately, stop it, go back

979
00:49:12.276 --> 00:49:13.376 A:middle
and tinker with the settings?

980
00:49:13.616 --> 00:49:14.966 A:middle
Now we give you an
option to go in

981
00:49:14.966 --> 00:49:17.266 A:middle
and change those
settings before you record

982
00:49:17.636 --> 00:49:18.876 A:middle
or to go straight to recording.

983
00:49:20.686 --> 00:49:22.946 A:middle
So what I'd like to do is
be able to browse through

984
00:49:22.946 --> 00:49:24.556 A:middle
and make sure that I've
got the settings I want.

985
00:49:24.876 --> 00:49:27.076 A:middle
And you see that the settings
are now all centralized

986
00:49:27.076 --> 00:49:30.386 A:middle
in the Inspector, again, for
familiarity for Xcode users.

987
00:49:30.826 --> 00:49:32.846 A:middle
So I can make sure that my
allocations instrument is set

988
00:49:32.846 --> 00:49:35.706 A:middle
up the way I want, my VM Tracker
is set up the way I want.

989
00:49:35.706 --> 00:49:38.986 A:middle
And when it's all good, I go to
the new, overhauled toolbar --

990
00:49:40.046 --> 00:49:42.906 A:middle
sleeker, cleaner, taking
up less screen real estate

991
00:49:42.906 --> 00:49:44.406 A:middle
than ever -- to start recording.

992
00:49:44.406 --> 00:49:46.696 A:middle
And we start recording.

993
00:49:46.986 --> 00:49:49.766 A:middle
And as always, Allocations
is tracking everything that's

994
00:49:49.766 --> 00:49:50.336 A:middle
going on.

995
00:49:50.756 --> 00:49:53.176 A:middle
We're getting a recording
of all the malloc regions,

996
00:49:53.396 --> 00:49:55.076 A:middle
all the Objective-C objects,

997
00:49:55.796 --> 00:49:57.096 A:middle
everything we could
possibly want.

998
00:49:58.036 --> 00:49:59.876 A:middle
We could go in and look at that
in a little bit more detail.

